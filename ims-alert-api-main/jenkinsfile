pipeline {
    agent any

    environment {
        MAVEN_HOME = tool 'Maven'
        DB_URL = 'jdbc:postgresql://localhost:5432/ims_alert_db'
        DB_USER = 'postgres'
        DB_PASS = 'password'
        JAR_PATH = 'target/ims-0.0.1.jar'
        PID_FILE = 'pid.file'
    }

    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'release', url: 'git@github.com:MrNerdyPants/IMS.git'
            }
        }

        stage('Check PostgreSQL Connection') {
            steps {
                script {
                    def status = sh(script: "pg_isready -h localhost -p 5432 -U ${DB_USER}", returnStatus: true)
                    if (status != 0) {
                        error("‚ùå PostgreSQL is not running or inaccessible.")
                    } else {
                        echo "‚úÖ PostgreSQL is running."
                    }
                }
            }
        }

        stage('Stop Running Application') {
            steps {
                dir('ims-alert-api-main') {
                    script {
                        if (fileExists(PID_FILE)) {
                            def pid = sh(script: "cat ${PID_FILE}", returnStdout: true).trim()
                            echo "üîç Checking if process ${pid} is running..."
                            def isRunning = sh(script: "ps -p ${pid} > /dev/null 2>&1", returnStatus: true)

                            if (isRunning == 0) {
                                echo "üõë Stopping running application with PID ${pid}..."
                                sh "kill ${pid}"
                                sleep 5

                                isRunning = sh(script: "ps -p ${pid} > /dev/null 2>&1", returnStatus: true)
                                if (isRunning == 0) {
                                    echo "‚ö†Ô∏è Force killing process ${pid}..."
                                    sh "kill -9 ${pid}"
                                }
                            }
                            sh "rm -f ${PID_FILE}"
                        }
                    }
                }
            }
        }

        stage('Build with Maven') {
            steps {
                dir('ims-alert-api-main') {
                    sh "${MAVEN_HOME}/bin/mvn clean package -DskipTests"
                }
            }
        }

        stage('Deploy') {
            steps {
                dir('ims-alert-api-main') {
                    script {
                        if (fileExists(JAR_PATH)) {
                            echo "üöÄ Starting application..."
                            sh """
                                export JENKINS_NODE_COOKIE=dontKillMe
                                nohup setsid java -jar ${JAR_PATH} --spring.profiles.active=prod > app.log 2>&1 &
                                echo \$! > ${PID_FILE}
                            """
                            sleep 15
                            def newPid = sh(script: "cat ${PID_FILE}", returnStdout: true).trim()
                            echo "‚úÖ Application started with PID ${newPid}"
                        } else {
                            error "‚ùå JAR file not found: ${JAR_PATH}"
                        }
                    }
                }
            }
        }
    }

    post {
        success {
            echo '‚úÖ Build and Deployment Successful!'
        }
        failure {
            echo '‚ùå Build Failed!'
        }
    }
}
